///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Mixpanel is an analytics tool, which is used to track user behavior.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const mixpanel_token = '2f7ac61bc37699f45257e47e80faea99'
function mixpanelSendEvent(event) {
  const eventBody = {
    "event": event,
    "properties": {
      "distinct_id": getCustomData().callerId || 'debug',
      "token": mixpanel_token,
      "Referred By": "Avatar",
    "$phone": getCustomData().callerId || 'debug',
    }
  }
  const data = base64_encode(JSON.stringify(eventBody))
  httpRequest(
    `https://api.mixpanel.com/track/?data=${data}`, 
    {method: 'GET'}
  )
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Buttons & other pre-defined options for a text chatbot
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const startButton = ['üìù –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º', '‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏', '‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã', 'üêí –¢–µ—Å—Ç—ã –Ω–∞ –æ–±–µ–∑—å—è–Ω—å—é –æ—Å–ø—É', 'üè† –ê–¥—Ä–µ—Å–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π']
const addresses = ['–ú—ã—Ç–Ω–∞—è 66 (–ú–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è)', '–ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è 55 (–ú–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è)', '–ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ 10 (–ú–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä)']
const addressesTimes = {
  '–ú—ã—Ç–Ω–∞—è 66 (–ú–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è)': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 18:00', 
  '–ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è (–ú–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è)': '—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 9:00 –¥–æ 17:00', 
  '–ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ 10 (–ú–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä)': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 15:00'
}

function dateButtons() {
  // Generate available visit options (only working days) for a text mode
  let buttons = []
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
  let dt = new Date();
  for (const i of [1, 2, 3, 4, 5]) {
    dt.setDate(dt.getDate() + 1)
    while (dt.getDay() === 0 || dt.getDay() === 6) {
      dt.setDate(dt.getDate() + 1)
    }
    buttons.push(`${dt.getDate()} ${months[dt.getMonth()]}`)
  }
  return {buttons: buttons}
}

const yesNoButtons = ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']
const phoneNumberRegexp = /[\+]?[78][\d]{10}/i

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// conversation context
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let lastUtterance = null
let lastCustomData = null
let phone = null
let cancelReason = null
let name = null
let listOfPhone = []
let lastPhoneNumberDigits = ''
let phoneNumberFailedCount = 0
let resultPhone = null
let operatorPhrase = '–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
let address = null
let existingVisitToCancel = null
let visitToCancelDescription = ''

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// backend emulation (we store requested visits for this particular user here - in real case it should be a BE integraion)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
let existingVisits = []


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// helper functions
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function dateToString(dt) {
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
  return `${parseInt(dt.substring(8,10))} ${months[parseInt(dt.substring(5,7))-1]}`
}

function timeToString(dt) {
  // 2016-12-14T09:00:00.000-08:00
  return dt.substring(11,16)
}

function dateTimeToVoice(dateTimeBegin, dateTimeEnd) {
  if (dateTimeEnd) {
    dateResponse = `${dateToString(dateTimeBegin)} —É–¥–æ–±–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å ${timeToString(dateTimeBegin)} –¥–æ ${timeToString(dateTimeEnd)}.`
  } else {
    dateResponse = `${dateToString(dateTimeBegin)} –Ω–∞ ${timeToString(dateTimeBegin)}.`
  }
  return dateResponse
}

function SmartResponse(ev) {
  // record last utterance info to repeat it if we need to
  const result = Response(ev)
  if (ev.utterance) {
    lastUtterance = ev.utterance
    lastCustomData = ev.customData
  }
  return result
}

function formPhoneStep(entity) {
  lastPhoneNumberDigits = ''
  for (var ent of entity) {
    listOfPhone.push(ent.value)
    lastPhoneNumberDigits = lastPhoneNumberDigits + ' ' + ent.value
  }
  if (listOfPhone.length > 0) {
    resultPhone = listOfPhone.join('')
    spacePhone = listOfPhone.join(' ')
  }
  if ((resultPhone.length === 10 && resultPhone[0] != '7' && resultPhone[0] != '8') || resultPhone.length === 11) {
    return 'next state'
  } else if (resultPhone.length > 11) {
    listOfPhone = []
    return 'repeat'
  } else {
    return 'continue'
  }
}

function formPhoneClear() {
  listOfPhone = [];
  lastPhoneNumberDigits = '';
  resultPhone = null;
}


let formDoctorTime = {
    doctor: { /* slot name */
      value: null,  /* collected value will be stored here */
      entity: 'doctorType',  /* which entity time are we expecting? (can be both system or custom) */
      customDataFunc: () => {return {buttons: ['–¢–µ—Ä–∞–ø–µ–≤—Ç', '–•–∏—Ä—É—Ä–≥', '–ü–µ–¥–∏–∞—Ç—Ä', '–ì–∏–Ω–µ–∫–æ–ª–æ–≥', '–£—Ä–æ–ª–æ–≥', '–ù–µ–≤—Ä–æ–ª–æ–≥', '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥']}},
      utterances: [   /* phrases to ask user for this slot */
        '–ê –∫ –∫–∞–∫–æ–º—É –≤—Ä–∞—á—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?', /* phrase to use at first */
        '–õ–∏–±–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞, –ª–∏–±–æ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ —Ç–∞–∫–æ–≥–æ –≤—Ä–∞—á–∞ - –º–æ–∂–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?',
        '–Ø –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∏ –≤—Ä–∞—á–∞ –∏ —è –∑–∞–ø–∏—à—É —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞' /* ask again if answer doesn't make any sense after first attempt */
      ],
      optional: false,   /* can we skip this slot if user haven't passed this info? */
      requestedCounter: 0 /* how many times we've asked user to fill this slot */
    },
    preferrabeDay: {
      value: null,
      valueRangeEnd: null,
      grain: null,
      entity: 'systemTime',
      customDataFunc: dateButtons,
      customDataTimeFunc: () => {return {buttons: ['—Å 9:00 –¥–æ 11:00', 'c 11:00 –¥–æ 13:00', '—Å 13:00 –¥–æ 15:00', '—Å 15:00 –¥–æ 17:00', '—Å 17:00 –¥–æ 19:00']}},
      utterances: [
        '–ê –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
        '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∑–∞–ø–∏—Å—å?'
      ],
      utterancesTimeInterval: [
        '–ê–≥–∞, –∞ –Ω–∞ –∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
        '–ò –Ω–∞ –∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏? –ò–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è?',
        '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞, –Ω–∞ –∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏? –ò–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è?'
      ],
      optional: false,
      requestedCounter: 0
    },
}

function fillFormData(form, utteranceEvent) {
  const entities = utteranceEvent.entities
  const text = utteranceEvent.text

  /* try to fill data, required by form */
  if (entities) {
    if (entities.systemTime) {
      if (form.preferrabeDay.value === null) {
        form.preferrabeDay.value = entities.systemTime[0].value
        form.preferrabeDay.grain = entities.systemTime[0].grain
        form.preferrabeDay.requestedCounter = 1
      } else if (form.preferrabeDay.grain === 'day' && (entities.systemTime[0].grain === 'hour' || entities.systemTime[0].grain === 'minute')) {
          const date = form.preferrabeDay.value.split("T")[0]
          const time = entities.systemTime[0].value.split("T")[1]
          form.preferrabeDay.value = `${date}T${time}`
          form.preferrabeDay.grain = entities.systemTime[0].grain
          form.preferrabeDay.requestedCounter = 1
      }
    }
    if (entities.systemTimerange) {
      const rangeStart = entities.systemTimerange[0].value;
      const rangeEnd = entities.systemTimerange[0].valueRangeEnd
      const rangeGrain = entities.systemTimerange[0].grain
      if (form.preferrabeDay.value === null || form.preferrabeDay.grain === 'month' || form.preferrabeDay.grain === 'year') {
        form.preferrabeDay.value = rangeStart
        form.preferrabeDay.valueRangeEnd = rangeEnd
        form.preferrabeDay.grain = rangeGrain
        form.preferrabeDay.requestedCounter = 1

        // scpecial case: tomorrow from 12 - then valueRangeEnd is not set
        if (rangeEnd === null && (rangeGrain === 'hour' || rangeGrain === 'minute')) {
          form.preferrabeDay.valueRangeEnd = rangeStart.split('T')[0] + 'T20:00:00.000-' + rangeStart.split('-')[1]
          form.preferrabeDay.requestedCounter = 1
        }
      } else if (rangeGrain === 'hour' || rangeGrain === 'minute') {
        const intervalDate = form.preferrabeDay.value.split('T')[0]
        const intervalStartTime = rangeStart.split('T')[1]
        const intervalEndTime = rangeEnd ? rangeEnd.split('T')[1] : '20:00:00.000-' + rangeStart.split('-')[1]
        
        form.preferrabeDay.value = `${intervalDate}T${intervalStartTime}`
        form.preferrabeDay.valueRangeEnd = `${intervalDate}T${intervalEndTime}`
        form.preferrabeDay.grain = rangeGrain
        form.preferrabeDay.requestedCounter = 1

        // scpecial case: tomorrow from 12 - then valueRangeEnd is not set
        if (rangeEnd === null) {
          form.preferrabeDay.valueRangeEnd = rangeStart.split('T')[0] + 'T20:00:00.000-' + rangeStart.split('-')[1]
          form.preferrabeDay.requestedCounter = 1
        }
      }
    }

    if (formDoctorTime.doctor.value === null) {
      // second question is "ok, I don't get it - just say it with your own words"
      if (formDoctorTime.doctor.requestedCounter < 2) {
        if (entities.doctorType) {
          formDoctorTime.doctor.value = entities.doctorType[0].value
        }
      } else {
        if (entities.doctorType) {
          formDoctorTime.doctor.value = entities.doctorType[0].value
        } else {
          formDoctorTime.doctor.value = text
        }
      }
    }
  }
}

function cleanFormData(form) {
  /* clean data of form */
    for (const [slotId, slot] of Object.entries(form)) { 
      slot.value = null
      slot.requestedCounter = 0
      if (slot.entity === 'systemTime') {
        slot.grain = null
        slot.valueRangeEnd = null
      }
    }
  }


function checkFormState() {
    /* if any of required slots is not filled up - then ask customer for this data specifically
     states [str] - current state of slot filling
     - inprogress - some required slots are not filled up yet
     - done - all required slots are filled up
     - failed - user hasn't filled up required slot even though they were asked specifically about this info

     utterance [str] - an utterance to ask user about missing information
      */

  // doctor
  if (formDoctorTime.doctor.value === null) {
    formDoctorTime.doctor.requestedCounter += 1
    if (formDoctorTime.doctor.requestedCounter <= formDoctorTime.doctor.utterances.length) {
      return {status: 'inprogress', utterance: formDoctorTime.doctor.utterances[formDoctorTime.doctor.requestedCounter-1], customData: formDoctorTime.doctor.customDataFunc()}
    } else {
      return {status: 'failed', utterance: null}
    }
  }

  // timerange
  if (formDoctorTime.preferrabeDay.value === null || formDoctorTime.preferrabeDay.grain === 'month' || formDoctorTime.preferrabeDay.grain === 'year') {
    formDoctorTime.preferrabeDay.requestedCounter += 1
    if (formDoctorTime.preferrabeDay.requestedCounter <= formDoctorTime.preferrabeDay.utterances.length) {
      return {status: 'inprogress', utterance: formDoctorTime.preferrabeDay.utterances[formDoctorTime.preferrabeDay.requestedCounter-1], customData: formDoctorTime.preferrabeDay.customDataFunc()}
    } else {
      return {status: 'failed', utterance: null}
    }
  } else if (formDoctorTime.preferrabeDay.grain === 'day') {
    formDoctorTime.preferrabeDay.requestedCounter += 1
    if (formDoctorTime.preferrabeDay.requestedCounter <= formDoctorTime.preferrabeDay.utterancesTimeInterval.length) {
      return {status: 'inprogress', utterance: formDoctorTime.preferrabeDay.utterancesTimeInterval[formDoctorTime.preferrabeDay.requestedCounter-1], customData: formDoctorTime.preferrabeDay.customDataTimeFunc()}
    } else {
      return {status: 'failed', utterance: null}
    }
  }
  return {status: 'done', utterance: null}
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// dialog states
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

addState({
  name: 'start',
  onEnter: async (event) => {
    cleanFormData(formDoctorTime)
    address = null
    phone = null
    mixpanelSendEvent('Start')
    if (event.visitsCounter === 1) {
      return SmartResponse({
        utterance: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∏–Ω–∏–∫–∞ Sacred Hearts, —á–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
        listen: true,
        customData: {buttons: startButton}
      });
    } else {
      return SmartResponse({
        listen: true
      });
    }
  },
  onUtterance:async(event)=>{
    if (event.text === '/start') { // for telegram bot - it always start conversaation with start message
      return SmartResponse({
        utterance: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∏–Ω–∏–∫–∞ Sacred Hearts, —á–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
        listen: true,
        customData: {buttons: startButton}
      })
    }

    if (event.text === '‚ùì –î—Ä—É–≥–æ–µ' || event.intent === 'operator') {
      operatorPhrase = '–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É, –ø—Ä–æ–≤–µ—Ä—é, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã'
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'monkeyOspa') {
      if (getCustomData().voice) {
        return SmartResponse({utterance: '–ú—ã —Ä–∞–∑–¥–µ–ª—è–µ–º –≤–∞—à—É –æ–∑–∞–±–æ—á–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–æ–π –Ω–æ–≤–æ–π –±–æ–ª–µ–∑–Ω—å—é. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –º—ã –Ω–µ —É–º–µ–µ–º –µ–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å. –ù–æ –µ—Å–ª–∏ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –æ–±–µ–∑—å—è–Ω—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ä–æ—á–Ω–æ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å. –ú–æ–∂–µ—Ç, —è –º–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', listen: true, customData: {buttons: startButton}})
      } else {
        return SmartResponse({utterance: '–ú—ã —Ä–∞–∑–¥–µ–ª—è–µ–º –≤–∞—à—É –æ–∑–∞–±–æ—á–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–æ–π –Ω–æ–≤–æ–π –±–æ–ª–µ–∑–Ω—å—é. –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –º—ã –Ω–µ —É–º–µ–µ–º –µ–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å. –ù–æ –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–æ–º–∞—à–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –µ—Å–ª–∏ –≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ø–æ—Ö–æ–∂–∏ –Ω–∞ –ø—Ä–∏–º–∞—Ç–∞ —Å —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—Ä–æ—á–Ω–æ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å. –ú–æ–∂–µ—Ç, —è –º–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', listen: true, customData: {buttons: startButton, image: 'https://cdn.vox-cdn.com/thumbor/G_Ts5lMSVPW3grBjSZ924gvyg-s=/0x0:666x444/1200x800/filters:focal(266x140:372x246)/cdn.vox-cdn.com/uploads/chorus_image/image/59491841/Macaca_nigra_self-portrait__rotated_and_cropped_.0.jpg'}})
      }
    } else if (event.intent === 'visitDoctor') {
      fillFormData(formDoctorTime, event)
      return SmartResponse({nextState: 'book'})
    } else if (event.intent === 'callDoctor') {
      operatorPhrase = '–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º'
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'pricing' || event.intent === 'haveService') {
      fillFormData(formDoctorTime, event)
      if (formDoctorTime.doctor.value) {
        return SmartResponse({nextState: 'suggestBooking'})
      } else {
        operatorPhrase = '–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω–∞ –Ω–∞—Å—á–µ—Ç —ç—Ç–æ–π —É—Å–ª—É–≥–∏, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Ç–æ—á–Ω–æ –ø–æ–¥—Å–∫–∞–∂–µ—Ç'
        return SmartResponse({nextState: 'operator'})
      }
    } else if (event.intent === 'yes' || event.intent === 'welcome' || event.intent === 'whatcani') {
      return SmartResponse({utterance: '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–ª–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤–∞–º —Å–º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä. –¢–∞–∫ —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', listen: true, customData: {buttons: startButton}})
    } else if (event.intent === 'no' || event.intent === 'bye') {
      return SmartResponse({utterance: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!', nextState: 'doorway', customData: {isFinal: true}})
    } else if (event.intent === 'cencel') {
      return SmartResponse({nextState: 'CancelSelect'})
    } else if (event.intent === 'doctorTime') {
      if (event.entities.address) {
        address = event.entities.address[0].value
      }
      return SmartResponse({nextState: 'openingHours'})
    } else if (event.intent === 'locations') {
      if (getCustomData().voice) {
        return SmartResponse({utterance: '–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∏–Ω–∏–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º —É–ª –ú—ã—Ç–Ω–∞—è –¥–æ–º 66 - –º–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è, —É–ª –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –¥–æ–º 55 - –º–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –∏ –≤ –ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–æ–º –ø–µ—Ä–µ—É–ª–∫–µ –¥–æ–º 10 - —ç—Ç–æ –º–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä. –ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —á–µ–º-—Ç–æ –µ—â–µ?', listen: true})
      } else {
        return SmartResponse({utterance: '–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∏–Ω–∏–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º: \nüè† —É–ª –ú—ã—Ç–Ω–∞—è –¥–æ–º 66 (–º–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è), \nüè† —É–ª –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –¥–æ–º 55 (–º–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è) \nüè† –ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ –¥–æ–º 10 (–º–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä). \n\n–ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —á–µ–º-—Ç–æ –µ—â–µ?', listen: true, customData: {buttons: startButton}})
      }
    } else if (event.intent === 'move') {
      operatorPhrase = '–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É'
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'coronavirus') {
      return SmartResponse({nextState: 'coronavirus'})
    } else if (event.intent === 'repeat') {
      return SmartResponse({utterance: lastUtterance, listen: true})
    } else if (event.utteranceCounter < 3) {
      const reAskingPhrases = [
        '–ß—Ç–æ, –ø—Ä–æ—Å—Ç–∏—Ç–µ?',
        '–í—Å–µ –µ—â–µ –Ω–µ –ø–æ–Ω—è–ª–∞. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–∑–≤–∞—Ç—å –≤—Ä–∞—á–∞ –Ω–∞ –¥–æ–º, –∑–∞–ø–∏—Å–∞—Ç—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–≤–æ–¥—É —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å, –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤–∞–º —Å–º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä. –¢–∞–∫ —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        '–ß—Ç–æ, –ø—Ä–æ—Å—Ç–∏—Ç–µ?',
        '–ß—Ç–æ, –ø—Ä–æ—Å—Ç–∏—Ç–µ?',
        '–ß—Ç–æ, –ø—Ä–æ—Å—Ç–∏—Ç–µ?',
      ]
      return SmartResponse({ utterance: reAskingPhrases[event.utteranceCounter - 1], listen: true, customData: {buttons: startButton} })
    } else {
      operatorPhrase = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–º–æ–∂–µ—Ç'
      return SmartResponse({ nextState: 'operator' })
    }
  },
});

addState({
  name: 'coronavirus',
  onEnter: async (event) => {
    mixpanelSendEvent('Corona')
    if (!getCustomData().voice) {
      return SmartResponse({utterance: '–ú—ã –ø—Ä–æ–≤–æ–¥–∏–º —Ç–µ—Å—Ç—ã –Ω–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å –º–µ—Ç–æ–¥–æ–º –ü–¶–† - –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤ –ª—é–±—É—é –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É —Å 9:00 –¥–æ 18:00 –∏ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏. –ù–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ:\n- –í–∑—è—Ç–∏–µ –º–∞–∑–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ 3-4 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏. –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å SARS-Cov-2 –∂–∏–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —ç–ø–∏—Ç–µ–ª–∏–∞–ª—å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫. –î–ª—è –ü–¶–†-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∑–æ–∫ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫. –í –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–Ω–∏—è –µ–¥—ã —ç–ø–∏—Ç–µ–ª–∏–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏ —Å–ª—É—â–∏–≤–∞—é—Ç—Å—è –ø–∏—â–µ–≤—ã–º –∫–æ–º–∫–æ–º —Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å–ª–∏–∑–∏—Å—Ç–æ–π –æ–±–æ–ª–æ—á–∫–∏. –ï—Å–ª–∏ –≤–∑—è—Ç—å –º–∞–∑–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–¥—ã, –≤ –ø—Ä–æ–±–∏—Ä–∫—É –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫.\n- –ü–µ—Ä–µ–¥ –≤–∑—è—Ç–∏–µ–º –º–∞–∑–∫–æ–≤ –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–∫–∞–ø–ª–∏, —Å–ø—Ä–µ–∏ –∏ –¥—Ä). –ü–æ—Å–ª–µ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—É—Å–∞ –Ω–∞ —Å–ª–∏–∑–∏—Å—Ç–æ–π —Å–Ω–∏–∂–∞–µ—Ç—Å—è –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∂–Ω–æ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ü–¶–†-—Ç–µ—Å—Ç–∞.\n- –ù–µ —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã –ø–µ—Ä–µ–¥ –≤–∑—è—Ç–∏–µ–º –º–∞–∑–∫–∞. –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –≤–∑—è—Ç–∏—è –º–∞–∑–∫–æ–≤ –¥–ª—è –ü–¶–†-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è ‚Äì –ø–æ–ª—É—á–∏—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–µ—Ç–æ–∫, –ø–æ—Ä–∞–∂–µ–Ω–Ω—ã—Ö –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö –æ—á–∏—â–∞—é—â–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—É—Å–∞ –≤ –ø–æ–ª—É—á–∞–µ–º–æ–º –º–∞–∑–∫–µ.\n - –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –¥–Ω—è –¥–æ –≤–∑—è—Ç–∏—è –º–∞–∑–∫–∞. –ê–ª–∫–æ–≥–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏–ª–æ–≤—ã–π —Å–ø–∏—Ä—Ç (—ç—Ç–∞–Ω–æ–ª), –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–∂–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ –º–Ω–æ–≥–∏—Ö –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –∞–ª–∫–æ–≥–æ–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –≤ –º–∞–∑–∫–µ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å—Å—è.\n\n–ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —á–µ–º-—Ç–æ –µ—â–µ?', nextState: 'start', customData: {buttons: startButton}})
    } else {
      return SmartResponse({utterance: '–ú—ã –ø—Ä–æ–≤–æ–¥–∏–º —Ç–µ—Å—Ç—ã –Ω–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å –º–µ—Ç–æ–¥–æ–º –ü–¶–† - –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤ –ª—é–±—É—é –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É —Å 9:00 –¥–æ 18:00 –∏ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏. –•–æ—Ç–∏—Ç–µ, —è –≤—ã—à–ª—é –≤–∞–º –°–ú–° —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–¥–∞—á–µ —Ç–µ—Å—Ç–∞?', listen: true})
    }
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'yes') {
      return SmartResponse({utterance: '–Ø –≤—ã—à–ª—é —Å–º—Å –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –º–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?',nextState: 'start', customData: {buttons: startButton}})
    } else if (event.intent === 'no' || event.intent === 'stop') {
      return SmartResponse({utterance: `–Ø—Å–Ω–æ. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?`, nextState: 'start', customData: {buttons: startButton}})
    } else if (event.intent === 'operator') {
      operatorPhrase = '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —è –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'repeat') {
        return SmartResponse({utterance: lastUtterance, listen: true})
    } else {
      if (event.utteranceCounter < 3) {
        return SmartResponse({utterance: '–ß—Ç–æ, –ø—Ä–æ—Å—Ç–∏—Ç–µ?', listen: true})
      } else {
        operatorPhrase = '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —è –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
        return SmartResponse({nextState: 'operator'})
      }
    }
  },
});

addState({
  name: 'openingHours',
  onEnter: async (event) => {
    mixpanelSendEvent('OpeningHours')
    if (getCustomData().voice) {
      return SmartResponse({utterance: '–ù–∞—à–∏ –∫–ª–∏–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 10 —É—Ç—Ä–∞ –¥–æ 9 –≤–µ—á–µ—Ä–∞. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ —Å 10 —É—Ç—Ä–∞ –¥–æ 12. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —è –º–æ–≥—É —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤–∞—Å —Å –∂–∏–≤—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ–Ω –≤–∞–º –ø–æ–º–æ–∂–µ—Ç. –°–æ–µ–¥–∏–Ω—è—é?', listen: true, customData: {buttons: yesNoButtons}})
    } else {
      if (!address) {
        return SmartResponse({utterance:'–ê –∫–∞–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', listen: true, customData: {buttons: addresses}})
      } else {
        return SmartResponse({utterance: `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏ ${address}: ${addressesTimes[address]}. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?`, customData: {buttons: startButton}, nextState: 'start'})
      }
    }
  },
  onUtterance: async (event) => {
    if (event.entities.address) {
      address = event.entities.address[0].value
    }
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (!getCustomData().voice && address) {
      return SmartResponse({utterance: `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏ ${address}: ${addressesTimes[address]}. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?`, customData: {buttons: startButton}, nextState: 'start'})
    } else if (event.intent === 'yes' || event.intent === 'operator') {
      operatorPhrase = '–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É'
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'no' || event.intent === 'stop') {
      return SmartResponse({utterance: `–Ø—Å–Ω–æ. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?`, nextState: 'start', customData: {buttons: startButton}})
    } else if (event.intent === 'repeat') {
        return SmartResponse({utterance: lastUtterance, listen: true})
    } else {
      if (getCustomData().voice) {
        if (event.utteranceCounter < 2) {
          return SmartResponse({utterance: '–ß—Ç–æ, –ø—Ä–æ—Å—Ç–∏—Ç–µ?', listen: true, customData: {buttons: yesNoButtons}})
        } else {
          operatorPhrase = '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —è –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
          return SmartResponse({nextState: 'operator'})
        }
      } else {
        if (event.utteranceCounter < 2) {
          return SmartResponse({utterance: '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞, –∫–ª–∏–Ω–∏–∫–∞ –ø–æ –∫–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', listen: true, customData: {buttons: addresses}})
        } else {
          return SmartResponse({utterance: '–í–∏–¥–∏–º–æ, –º–µ–Ω—è –ø–ª–æ—Ö–æ –æ–±—É—á–∏–ª–∏, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞ üò¢, –º–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', customData: {buttons: startButton}, nextState: 'start'})
        }
      }
    }
  },
});

addState({
  name: 'book',
  onEnter: async (event) => {
    mixpanelSendEvent('Book')
    const {status, utterance, customData} = checkFormState()
    if (utterance) {
      if (getCustomData().voice) {
        return SmartResponse({utterance: utterance, listen: true, customData: customData})
      } else {
        return SmartResponse({utterance: utterance + '\n(–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ)', listen: true, customData: customData})
      }
    } else {
      if (status === 'done') {
        Logger.write(`done`) /* send collected data to log */
        return SmartResponse({nextState: 'bookConfirmation'})
      } else {
        operatorPhrase = '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —è –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
        return SmartResponse({nextState: 'operator'})
      }
    }
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'doctorTime') {
      return SmartResponse({utterance: `–ù–∞—à–∏ –∫–ª–∏–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 10 —É—Ç—Ä–∞ –¥–æ 9 –≤–µ—á–µ—Ä–∞. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ —Å 10 —É—Ç—Ä–∞ –¥–æ 12. ${lastUtterance}`, listen: true, customData: lastCustomData})
    } else if (event.intent === 'idontknow') {
      operatorPhrase = '–ü–æ–Ω—è–ª–∞, —Ç–æ–≥–¥–∞ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω –≤–∞–º –ø–æ–º–æ–≥'
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'locations') {
      if (getCustomData().voice) {
        return SmartResponse({utterance: `–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∏–Ω–∏–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º —É–ª –ú—ã—Ç–Ω–∞—è –¥–æ–º 66 - –º–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è, —É–ª –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –¥–æ–º 55 - –º–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –∏ –≤ –ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–æ–º –ø–µ—Ä–µ—É–ª–∫–µ –¥–æ–º 10 - —ç—Ç–æ –º–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä. ${lastUtterance}`, listen: true, customData: lastCustomData})
      } else {
        return SmartResponse({utterance: `–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∏–Ω–∏–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º: \nüè† —É–ª –ú—ã—Ç–Ω–∞—è –¥–æ–º 66 (–º–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è), \nüè† —É–ª –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –¥–æ–º 55 (–º–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è) \nüè† –ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ –¥–æ–º 10 (–º–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä). \n\n${lastUtterance}`, listen: true, customData: lastCustomData})
      }
    } else if (event.intent === 'no' || event.intent === 'stop') {
      cleanFormData(formDoctorTime)
      return SmartResponse({utterance: `–Ø—Å–Ω–æ. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?`, nextState: 'start', customData: {buttons: startButton}})
    } else if (event.intent === 'operator') {
      operatorPhrase = '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —è –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'repeat') {
        return SmartResponse({utterance: lastUtterance, listen: true})
    }
    fillFormData(formDoctorTime, event)
    return SmartResponse({nextState: 'book'}) /* go back to the same state and check if form is finally filled */
  },
});

addState({
  name: 'bookConfirmation',
  onEnter: async (event) => {
    mixpanelSendEvent('BookConfirmation')
    return SmartResponse({utterance: `–ò—Ç–∞–∫, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${dateTimeToVoice(formDoctorTime.preferrabeDay.value, formDoctorTime.preferrabeDay.valueRangeEnd)} –£—Å–ª—É–≥–∞: ${formDoctorTime.doctor.value}. –í—Å–µ –≤–µ—Ä–Ω–æ?`, listen: true, customData: {buttons: yesNoButtons}})
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'yes') {
      return SmartResponse({nextState: 'phoneNumber'})
    } else if (event.intent === 'repeat') {
        return SmartResponse({utterance: lastUtterance, listen: true})
    } else {
      cleanFormData(formDoctorTime)
      return SmartResponse({nextState: 'bookTryOnceMore'}) /* go back to the same state and check if form is finally filled */
    }
  },
});

addState({
  name: 'bookTryOnceMore',
  onEnter: async (event) => {
    mixpanelSendEvent('BookTryOnceMore')
    if (getCustomData().voice) {
      return SmartResponse({ utterance: '–Ø—Å–Ω–æ, –æ—á–µ–Ω—å –∂–∞–ª—å, —Ö–æ—Ç–∏—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', listen: true, customData: {buttons: yesNoButtons}})
    } else {
      return SmartResponse({utterance: '–Ø—Å–Ω–æ, –æ—á–µ–Ω—å –∂–∞–ª—å. –ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —á–µ–º-—Ç–æ –µ—â–µ?', nextState: 'start', customData: {buttons: startButton}})
    }
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'yes' || event.intent === 'visitDoctor') {
      fillFormData(formDoctorTime, event)
      return SmartResponse({ nextState: 'book'})
    } else {
      operatorPhrase = '–ü–æ–Ω—è–ª–∞, —Ç–æ–≥–¥–∞ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω –≤–∞–º –ø–æ–º–æ–≥'
      return SmartResponse({nextState: 'operator'})
    }    
  },
});

addState({
  name: 'phoneNumber',
  onEnter: async (event) => {
    if (!getCustomData().phone) {
      return SmartResponse({nextState: 'phoneNumberInput'})
    } else {
      return SmartResponse({utterance: '–ú–æ–≥—É —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∑–≤–æ–Ω–∏—Ç–µ, –¥–ª—è –∑–∞–ø–∏—Å–∏?', listen: true})
    }
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'yes') {
      phone = getCustomData().phone
      return SmartResponse({nextState: 'BookName'})
    } else if (event.intent === 'no' || event.intent === 'stop') {
      return SmartResponse({nextState: 'phoneNumberInput'})
    } else {
      if (event.utteranceCounter < 3) {
        return SmartResponse({utterance: '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞, –º–æ–≥—É —è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏?', listen: true})
      }
      operatorPhrase = '–Ø –ø–æ–ø—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω –≤–∞–º –ø–æ–º–æ–≥'
      return SmartResponse({nextState: 'operator'})
    }    
  }
})


addState({
  name: 'phoneNumberInput',
  onEnter: async (event) => {
    mixpanelSendEvent('BookPhoneNumber')
    if (!getCustomData().voice) {
      return SmartResponse({utterance: '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx', listen: true})
    }

    if (event.visitsCounter === 1) {
      return SmartResponse({utterance: '–ü—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', listen: true})
    } else {
      return SmartResponse({listen: true})
    }
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'no' || event.intent === 'stop' || event.intent === 'operator') {
      phoneNumberFailedCount += 1
      if (phoneNumberFailedCount === 1) {
        formPhoneClear()
        return SmartResponse({utterance: `–ü–æ–Ω—è–ª–∞, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, —è –±—É–¥—É –≤–≤–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–º–∏.`, listen: true})
      } else {
        operatorPhrase = `–Ø—Å–Ω–æ. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É.`
        return SmartResponse({nextState: 'operator'})
      }
    } 

    /* do slot filling */
    if (!getCustomData().voice) {
      return SmartResponse({nextState: 'BookName'})
      // you can do a input validation here - but I didn't
      let match = phoneNumberRegexp.exec(event.text)
      if (match) {
        phone = match[0]
        return SmartResponse({nextState: 'BookName'})
      } else {
        return SmartResponse({utterance: '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx', listen: true})
      }
    }

    if (event.entities.systemNumber) {
      const utterance = formPhoneStep(event.entities.systemNumber)
      if (utterance === 'next state') {
        return SmartResponse({nextState: 'PhoneNumberConfirm'})
      } else if (utterance === 'repeat') {
        resultPhone = null
        listOfPhone = []
        return SmartResponse({ utterance: '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è —Å–±–∏–ª–∞—Å—å, –¥–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞', listen: true })
      } else if (utterance === 'continue') {
        return SmartResponse({ utterance: `–ê–≥–∞, ${lastPhoneNumberDigits}`, listen: true })
      }
    }
    if (event.intent === 'repeat') {
      return SmartResponse({utterance: lastUtterance, listen: true})
    } else if (event.utteranceCounter < 4) {
      resultPhone = null
      listOfPhone = []
      return SmartResponse({ utterance: '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è —Å–±–∏–ª–∞—Å—å, –¥–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞', listen: true })
    } else {
      operatorPhrase = '–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —è –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∏ –æ–Ω —Å–º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å'
      return SmartResponse({nextState: 'operator'})
    }

  },
});


addState({
  name: 'PhoneNumberConfirm',
  onEnter: async (event) => {
    mixpanelSendEvent('PhoneNumberConfirm')
    return SmartResponse({utterance: `–ò—Ç–∞–∫, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${spacePhone}. –í—Å–µ –≤–µ—Ä–Ω–æ?`, listen: true})
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'yes') {
      return SmartResponse({nextState: 'BookName'})
    } else if (event.intent === 'repeat') {
        return SmartResponse({utterance: lastUtterance, listen: true})
    } else {
      phoneNumberFailedCount += 1
      if (phoneNumberFailedCount === 1) {
        formPhoneClear()
        return SmartResponse({utterance: `–ü–æ–Ω—è–ª–∞, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, —è –±—É–¥—É –≤–≤–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–º–∏.`, nextState: 'phoneNumberInput'})
      } else {
        operatorPhrase = '–Ø –≤–∞—Å –ø–æ–Ω—è–ª–∞. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É.'
        return SmartResponse({nextState: 'operator'}) /* go back to the same state and check if form is finally filled */
      }
    }
  },
});


addState({
  name: 'suggestBooking',
  onEnter: async (event) => {
    mixpanelSendEvent('SuggestBooking')
    return SmartResponse({utterance: `–î–∞ —É –Ω–∞—Å –µ—Å—Ç—å ${formDoctorTime.doctor.value}. –•–æ—Ç–∏—Ç–µ, –∑–∞–ø–∏—à—É –≤–∞—Å –∫ –Ω–µ–º—É –Ω–∞ –ø—Ä–∏–µ–º?`, listen: true, customData: {buttons: yesNoButtons}})
    
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'yes') {
      fillFormData(formDoctorTime, event)
      return SmartResponse({nextState: 'booking'})
    } else if (event.intent === 'locations') {
      if (getCustomData().voice) {
        return SmartResponse({utterance: `–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∏–Ω–∏–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º —É–ª –ú—ã—Ç–Ω–∞—è –¥–æ–º 66 - –º–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è, —É–ª –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –¥–æ–º 55 - –º–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –∏ –≤ –ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–æ–º –ø–µ—Ä–µ—É–ª–∫–µ –¥–æ–º 10 - —ç—Ç–æ –º–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä. –¢–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—Ä–∏–µ–º?`, listen: true})
      } else {
        return SmartResponse({utterance: `–£ –Ω–∞—Å –µ—Å—Ç—å –∫–ª–∏–Ω–∏–∫–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º: \nüè† —É–ª –ú—ã—Ç–Ω–∞—è –¥–æ–º 66 (–º–µ—Ç—Ä–æ –¢—É–ª—å—Å–∫–∞—è), \nüè† —É–ª –ë–æ–ª—å—à–∞—è –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è –¥–æ–º 55 (–º–µ—Ç—Ä–æ –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–∞—è) \nüè† –ö–∞–º–µ—Ä–≥–µ—Ä—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ –¥–æ–º 10 (–º–µ—Ç—Ä–æ –¶–≤–µ—Ç–Ω–æ–π –ë—É–ª—å–≤–∞—Ä). \n\n–¢–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—Ä–∏–µ–º?`, listen: true})
      }
    } else if (event.intent === 'repeat') {
        return SmartResponse({utterance: lastUtterance, listen: true})
    } else {
      operatorPhrase = '–Ø –≤–∞—Å –ø–æ–Ω—è–ª–∞. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É.'
      return SmartResponse({nextState: 'operator'}) /* go back to the same state and check if form is finally filled */
    }
  },
});


addState({
  name: 'BookName',
  onEnter: async (event) => {
    mixpanelSendEvent('BookName')
    return SmartResponse({utterance: `–ò –∫–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?`, listen: true})
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'no' || event.intent === 'stop' || event.intent === 'operator') {
      operatorPhrase = `–Ø—Å–Ω–æ. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É.`
      return SmartResponse({nextState: 'operator'})
    }
    if (event.entities.systemPerson) {
      name = event.entities.systemPerson[0].value
      existingVisits.push({doctor: formDoctorTime.doctor.value, time: dateTimeToVoice(formDoctorTime.preferrabeDay.value, formDoctorTime.preferrabeDay.valueRangeEnd)})
      mixpanelSendEvent('Booked')
      if (!getCustomData().voice) {
        return SmartResponse({ utterance: `–°–ø–∞—Å–∏–±–æ, ${name}! –Ø —Å–¥–µ–ª–∞–ª–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å:\n–í—Ä–µ–º—è: ${dateTimeToVoice(formDoctorTime.preferrabeDay.value, formDoctorTime.preferrabeDay.valueRangeEnd)}\n–£—Å–ª—É–≥–∞: ${formDoctorTime.doctor.value}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç —Å–∏–º–ø—Ç–æ–º–æ–≤ –û–†–í–ò, –ø–µ—Ä–µ–¥ –ø–æ—Å–µ—â–µ–Ω–∏–µ–º, –∞ —Ç–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–ª–∏—Å.\n\n–ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?`, nextState: 'start', customData: {buttons: startButton}})
      } else {
        return SmartResponse({ utterance: `–°–ø–∞—Å–∏–±–æ, ${name}! –Ø –∑–∞–ø–∏—Å–∞–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ–¥–∞–ª–∞ –µ–≥–æ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º, –æ–Ω–∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º –≤–∞–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —Ñ–∞–∫—Ç—É –∑–∞–ø–∏—Å–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?`, nextState: 'start', customData: {buttons: startButton}})
      }
    } else if (event.utteranceCounter > 2) {
      name = event.text
      mixpanelSendEvent('Booked')
      return SmartResponse({ utterance: '–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ–¥–∞–ª–∞ –µ–≥–æ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º, –æ–Ω–∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º –≤–∞–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —Ñ–∞–∫—Ç—É –∑–∞–ø–∏—Å–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', nextState: 'start', customData: {buttons: startButton}})
    } else {
      return SmartResponse({ utterance: '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ –ø–æ–Ω—è–ª–∞', listen: true })
    }
  },
});

addState({
  name: 'CancelSelect',
  onEnter: async (event) => {
    mixpanelSendEvent('CancelSelect')
    if (existingVisits.length === 0) {
      return SmartResponse({utterance: '–í –±–∞–∑–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –º–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', nextState: 'start', customData: {buttons: startButton}})
    } else if (existingVisits.length === 1) {
      existingVisitToCancel = existingVisits[0]
      existingVisits = []
      return SmartResponse({nextState: 'CancelReason'})
    } else {
      let doctorList = ''
      let doctorButtons = []
      for (const visit of existingVisits) {
        doctorList += '\n- ' + visit.doctor + ' ' + visit.time
        doctorButtons.push(visit.doctor + ' ' + visit.time)
      }
      return SmartResponse({utterance: `–Ø –Ω–∞—à–ª–∞ –≤ –±–∞–∑–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∫ —Å–ª–µ–¥—É—é—â–∏–º –¥–æ–∫—Ç–æ—Ä–∞–º: ${doctorList}\n\n–ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö –æ—Ç–º–µ–Ω–∏—Ç—å?`, listen: true, customData: {buttons: doctorButtons}})
    }
  },
  onUtterance: async (event) => {
    if (event.intent === 'no' || event.intent === 'stop' || event.intent === 'operator') {
      operatorPhrase = `–Ø—Å–Ω–æ. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É.`
      return SmartResponse({nextState: 'operator'})
    } else if (event.intent === 'repeat') {
      return SmartResponse({utterance: lastUtterance, listen: true})
    } else if (event.entities.doctorType) {
      let doctorToCancel = event.entities.doctorType[0].value
      let leftVisits = []
      for (const visit of existingVisits) {
        if (visit.doctor != doctorToCancel) {
          leftVisits.push(visit)
        } else {
          existingVisitToCancel = visit
        }
      }
      if (leftVisits.length === existingVisits.length) {
        return SmartResponse({utterance: '–•–º, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –¥–æ–∫—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π, –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?', listen: true})
      } else {
        existingVisits = leftVisits
        return SmartResponse({nextState: 'CancelReason'})
      }
    } else {
      return SmartResponse({ utterance: '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞, –º–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', nextState: 'start', customData: {buttons: startButton}})
    }
  },
});

addState({
  name: 'CancelReason',
  onEnter: async (event) => {
    mixpanelSendEvent('CancelReason')
    return SmartResponse({utterance: `–Ø –æ—Ç–º–µ–Ω–∏–ª–∞ –≤–∞—à—É –∑–∞–ø–∏—Å—å (${existingVisitToCancel.doctor} ${existingVisitToCancel.time}). –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ö–æ—Ç–µ–ª–∞ –±—ã –≤–∞—Å —Å–ø—Ä–æ—Å–∏—Ç—å: –∞ –ø–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ?`, listen: true})
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'no' || event.intent === 'stop' || event.intent === 'operator') {
      return SmartResponse({utterance: '–Ø—Å–Ω–æ. –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', nextState: 'start', customData: {buttons: startButton}})
    } else if (event.intent === 'repeat') {
      return SmartResponse({utterance: lastUtterance, listen: true})
    } else {
      cancelReason = event.text
      return SmartResponse({ utterance: '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! –ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', nextState: 'start', customData: {buttons: startButton}})
    }
  },
});

addState({
  name: 'operator',
  onEnter: async (event) => {
    mixpanelSendEvent('Operator')
    /*var newDate = new Date();
    if (newDate.getHours > 10 && newDate.getHours < 20) {
      customDate = {operator: true}
    return SmartResponse({nextState: 'doorway'})
    } else {
      customDate = {operator: false}
      return SmartResponse({utterance: `–£–≤—ã, —Å–µ–π—á–∞—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–º –∏ –æ–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–º–æ–≥—É—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!`, nextState: 'doorway'})

    }*/
    if (!getCustomData().voice) {
      return SmartResponse({utterance: '(–í —Ä–µ–∞–ª—å–Ω–æ–º –∫–µ–π—Å–µ –º—ã –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –±–µ—Å—à–æ–≤–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω —Å–º–æ–≥ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–æ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π)', nextState: 'doorway', customData: {isFinal: true}})
    }
    return SmartResponse({utterance: operatorPhrase + '. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –º—ã –±—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É.', nextState: 'doorway', customData: {isFinal: true}})
  },
  onUtterance: async (event) => {
    /* add handling for intents, which are appropriate in the middle of slot filling */
    if (event.intent === 'no' || event.intent === 'stop' || event.intent === 'operator') {
      return SmartResponse({utterance: `–Ø—Å–Ω–æ. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É.`, nextState: 'operator'})
    } else if (event.intent === 'repeat') {
      return SmartResponse({utterance: lastUtterance, listen: true})
    } else {
      cancelReason = event.text
      return SmartResponse({ utterance: '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ!', nextState: 'doorway', customData: {isFinal: true} })
    }
  },
});


addState({
  name: 'doorway',
  onEnter: async (event) => {
    mixpanelSendEvent('Finish')
    /* –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥*/
    return SmartResponse({ isFinal: true });
  },
});


/* –î–µ–ª–∞–µ–º 'start' –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ */
setStartState('start');